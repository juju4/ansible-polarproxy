---

- name: Verify
  hosts: polarproxy
  tasks:
    - name: Ensure /var/_polarproxy/PolarProxy/System.Runtime.dll config file is present
      ansible.builtin.stat:
        path: /var/_polarproxy/PolarProxy/System.Runtime.dll
      register: dll
    - name: Validate dll present
      ansible.builtin.assert:
        that:
          - dll.stat.exists
          - dll.stat.size != 0
          - dll.stat.mode == '0755'
          - dll.stat.pw_name == '_polarproxy'

    - name: Ensure /var/_polarproxy/PolarProxy/PolarProxy bin file is present
      ansible.builtin.stat:
        path: /var/_polarproxy/PolarProxy/PolarProxy
      register: bin
    - name: Validate bin present
      ansible.builtin.assert:
        that:
          - bin.stat.exists
          - bin.stat.size != 0
          - bin.stat.mode == '0755'
          - bin.stat.pw_name == '_polarproxy'

    - name: Ensure /etc/systemd/system/PolarProxy.service file is present
      ansible.builtin.stat:
        path: /etc/systemd/system/PolarProxy.service
      register: systemd
    - name: Validate systemd file present
      ansible.builtin.assert:
        that:
          - systemd.stat.exists
          - systemd.stat.size != 0
          - systemd.stat.mode == '0644'
          - systemd.stat.pw_name == 'root'

    - name: Ensure pgrep is present
      ansible.builtin.package:
        name: procps-ng
        state: present
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version | int >= 8
    - name: Ensure process is running
      ansible.builtin.command: pgrep -u _polarproxy PolarProxy
      register: ps
      changed_when: false
      ignore_errors: true
    - name: Validate ps output
      ansible.builtin.assert:
        that: ps.stdout

    - name: Check all processes
      ansible.builtin.command: ps aux
      changed_when: false
      register: psa
    - name: Debug | ps aux output
      ansible.builtin.debug:
        var: psa
        verbosity: 1

    - name: Ensure ports are listening
      ansible.builtin.wait_for:
        host: "{{ item.h }}"
        port: "{{ item.p }}"
        timeout: 10
      with_items:
        - { h: localhost, p: 10443 }
      failed_when: false

    - name: Test curl www.google.com
      ansible.builtin.uri:
        url: http://www.google.com
        return_content: yes
        # no cacert option?
        validate_certs: no
      register: curl1
      changed_when: false
    - name: Validate curl1 output
      ansible.builtin.assert:
        that: >
          "'<title>Google</title>' in curl1.content and curl1.status == 200"
      failed_when: false
